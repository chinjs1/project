--- Reconfigure SSH on the GitLab Machine ----

1. Change the host's SSH port to a higher port, so the gitlab docker can use port 22
	sudo nano /etc/ssh/sshd_config
		Change Port to 2222

2. Restart the SSH service
	sudo service ssh restart

_____________________________________________________________________________________________________________________________________________

--- Create a backup of GitLab ---

1. Use the appropriate command for the package install (this command is for the Omnibus package)
	sudo gitlab-rake gitlab:backup:create

2. All configuration for omnibus-gitlab is stored in /etc/gitlab. To backup your configuration, just backup this directory.
	sudo sh -c 'umask 0077; tar -cf $(date "+etc-gitlab-%s.tar") -C / etc/gitlab'

_____________________________________________________________________________________________________________________________________________

--- Restore backup of GitLab ---

1. Login to the machine you wish to restore the backup on
	a. put the required backup files in the home dir
	b. ensure to put the docker-compose.yml file into a sensibly named folder e.g gitlab-docker

2. Change the example timestamp below for your configuration backup
	sudo tar -xf etc-gitlab-1399948539.tar

3. Move the config files to the docker volume
	sudo cp etc/gitlab/* /srv/gitlab/config/

4. Edit config for testing env (if in testing env)
	change external url, ssl_certificate & ssl_certificate_key path

5. Move the data backup into the backups folder in the docker volume
	sudo cp 1488752574_2017_03_05_gitlab_backup.tar /srv/gitlab/data/backups/

6. Restart the container
	docker-compose restart

7. Create a shell inside the container to restore the backup
	docker-compose exec web /bin/bash
		
8. Stop the processes that are connected to the database. Leave the rest of GitLab running:
	gitlab-ctl stop unicorn
	gitlab-ctl stop sidekiq
	gitlab-ctl status

9. Next, restore the backup, specifying the timestamp of the backup you wish to restore:
	gitlab-rake gitlab:backup:restore BACKUP=1488752574_2017_03_05

10. Restart and check GitLab:
	gitlab-ctl start
	gitlab-rake gitlab:check SANITIZE=true

11. Exit out of the Bash session in the container
	exit

12. Restart the container 
	docker-compose restart
________________________________________________________________________________________________________________

--- Mattermost Backup ---

1. tar -czvf mattermost-backup.tar.gz /home/ubutnu/mattermost
	sudo -i -u postgres
  	pg_dump -c mattermost > mattermost.bak
  	exit

	cp /var/lib/postgresql/mattermost.bak .
	*Ref https://www.digitalocean.com/community/tutorials/how-to-backup-postgresql-databases-on-an-ubuntu-vps https://www.postgresql.org/docs/9.5/static/app-pgdump.html

_____________________________________________________________________________________________________________________________________________

--- Mattermost Backups ---

1. Clone the repo: git clone https://github.com/mattermost/mattermost-docker.git -b team-and-enterprise

2. Build the image: docker-compose build

3. Run the up so it creates the database and configurations required to restore backup: docker-compose up

4. Move the database backup to the volume that the database container has access too: mv mattermost.bak mattermost-docker/volumes/db/var/lib/postgresql/data/

5. Start the database container(make sure you are in the docker folder): docker-compose start db

6. Make a bash session in the db container as the user postgres: docker-compose exec --user postgres db /bin/bash
	: cd /var/lib/postgresql/data/
	: psql mattermost < mattermost.bak (move whatever is in the .bak to the db)

_____________________________________________________________________________________________________________________________________________

--- Restore the data ---

1. Move the config.json file to correct place: cd home/ubuntu/mattermost/config
	- move the file to volumes config: sudo mv config.json ../../../../mattermost-docker/volumes/app/mattermost/config/
	- move all the data to volumes data: cd home/ubuntu/mattermost/data and then sudo mv config.json ../../../../mattermost-docker/volumes/app/mattermost/config/

2. Modify the config file (in the test environment):
	- cd volumes/app/mattermost/config/
	- sudo nano config.json (change the SqlSettings < DataSource: give the password and remove the ip address and replace it with the database db)
		change the FileSettings < Directory to /mattermost/data/

3. Ensure to be in the directory that docker-compose.yml is: cd mattermost-docker and run docker-compose up

4. Test in your web browser once finished

_____________________________________________________________________________________________________________________________________________


